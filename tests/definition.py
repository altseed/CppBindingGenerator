from cbg import *

definition = Definition()
definition.namespace = 'CoreSample'

with Class('SimpleClass') as simple_class:
    definition.classes.append(simple_class)
    simple_class.brief['ja'] = "単純なクラス"
    simple_class.namespace = 'CoreSample'
    simple_class.serialize_type = SerializeType.Interface
    with simple_class.add_constructor() as func:
        func.brief['ja'] = "コンストラクタ"

wrapper_generator = WrapperGenerator()
wrapper_generator.definition = definition
wrapper_generator.header = '#include "CoreSample.h"'
wrapper_generator.output_path = './tests/WrapperCPP/AutoGeneratedWrapper.cpp'
wrapper_generator.generate()

binding_generator = BindingGeneratorCS()
binding_generator.definition = definition
binding_generator.output_path = './tests/BindingCS/AutoGeneratedBindings.cs'
binding_generator.dll_name = 'CoreSample'
binding_generator.generate()