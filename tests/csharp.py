import cbg
import ctypes
import sys
import argparse

from definitions import define, define_cpp

parser = argparse.ArgumentParser()
parser.add_argument('-l', '--lang', type=str, default='en',
                    required=False, choices=['ja', 'en'])
args = parser.parse_args()

# generate
bindingGenerator = cbg.BindingGeneratorCSharp(define, [], args.lang)
bindingGenerator.output_path = 'tests/results/CSharp/AutoGeneratedCoreBindings.cs'
bindingGenerator.dll_name = 'CoreLib'
bindingGenerator.namespace = 'HelloWorld'
bindingGenerator.generate()

# sharedObjectGenerator = cbg.SharedObjectGenerator(define, [])

# sharedObjectGenerator.header = '''
# #include "HelloWorld.h"
# '''

# sharedObjectGenerator.func_name_create_and_add_shared_ptr = 'HelloWorld::CreateAndAddSharedPtr'
# sharedObjectGenerator.func_name_add_and_get_shared_ptr = 'HelloWorld::AddAndGetSharedPtr'

# sharedObjectGenerator.output_path = 'tests/results/so/AutoGeneratedCoreWrapper.cpp'
# sharedObjectGenerator.generate()

# generate
dep = cbg.DefineDependency()
dep.namespace = 'HelloWorld'
dep.define = define

bindingGenerator_cpp = cbg.BindingGeneratorCSharp(define_cpp, [dep], args.lang)
bindingGenerator_cpp.output_path = 'tests/results/CSharpCpp/AutoGeneratedCoreBindings.cs'
bindingGenerator_cpp.dll_name = 'cplusplus'
bindingGenerator_cpp.namespace = 'HelloWorld'
bindingGenerator_cpp.generate()

# sharedObjectCppGenerator = cbg.SharedObjectGenerator(define_cpp, [dep])

# sharedObjectCppGenerator.header = '''
# #include "cplusplus.h"
# '''

# sharedObjectCppGenerator.func_name_create_and_add_shared_ptr = 'HelloWorldCpp::CreateAndAddSharedPtr'
# sharedObjectCppGenerator.func_name_add_and_get_shared_ptr = 'HelloWorldCpp::AddAndGetSharedPtr'

# sharedObjectCppGenerator.output_path = 'tests/results/cplusplus/AutoGeneratedCoreWrapper.cpp'
# sharedObjectCppGenerator.generate()
